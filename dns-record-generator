$ErrorActionPreference = "Stop"

# Function to retrieve forward lookup zones on the DNS server
function Get-ForwardLookupZones {
    Get-DnsServerZone | Where-Object {$_.ZoneType -eq "Primary"} | Select-Object -ExpandProperty ZoneName
}

# Function to select random dictionary names for A records
function Get-RandomNames {
    param(
        [int]$Count
    )
    $words = @('alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa')
    $words | Sort-Object {Get-Random} | Select-Object -First $Count
}

# Function to create A records
function Create-DnsRecords {
    param(
        [array]$Zones,
        [array]$Records
    )
    foreach ($record in $Records) {
        $zone = Get-Random -InputObject $Zones  # Randomly assign each record to a selected zone
        Add-DnsServerResourceRecordA -Name $record.Name -ZoneName $zone -IPv4Address $record.IP -AllowUpdateAny -TimeToLive 01:00:00
        $record | Add-Member -MemberType NoteProperty -Name Zone -Value $zone -Force
    }
}

# Function to delete DNS records (rollback)
function Remove-DnsRecords {
    param(
        [array]$Records
    )
    foreach ($record in $Records) {
        Remove-DnsServerResourceRecord -ZoneName $record.Zone -Name $record.Name -Force -ErrorAction SilentlyContinue
    }
}

# Function to modify DNS records with new random IPs
function Modify-DnsRecords {
    param(
        [array]$Records
    )
    foreach ($record in $Records) {
        $newIP = (1..4 | ForEach-Object {Get-Random -Minimum 1 -Maximum 255}) -join '.'
        Set-DnsServerResourceRecord -ZoneName $record.Zone -OldInputObject (Get-DnsServerResourceRecord -ZoneName $record.Zone -Name $record.Name) -NewInputObject (New-Object Microsoft.Management.Infrastructure.CimInstance -ArgumentList 'DnsServerResourceRecordA',[Microsoft.Management.Infrastructure.CimInstance]@{HostName=$record.Name; RecordClass="IN"; IPv4Address=$newIP}) -ErrorAction SilentlyContinue
    }
}

# Main script logic
try {
    $zones = Get-ForwardLookupZones
    if (-not $zones) {
        Write-Error "No forward lookup zones found."
        exit
    }
    
    # Prompt user to select forward lookup zones
    Write-Host "Select the forward lookup zones to use (comma-separated numbers):"
    for ($i = 0; $i -lt $zones.Count; $i++) {
        Write-Host "[$($i + 1)] $($zones[$i])"
    }
    
    $selectedIndexes = Read-Host "Enter your selection"
    $selectedIndexes = $selectedIndexes -split "," | ForEach-Object { $_.Trim() -as [int] }
    $selectedZones = $selectedIndexes | Where-Object { $_ -gt 0 -and $_ -le $zones.Count } | ForEach-Object { $zones[$_ - 1] }
    
    if (-not $selectedZones) {
        Write-Error "Invalid selection. No valid zones selected."
        exit
    }
    
    # Randomly assign records to selected zones
    $records = @()
    $names = Get-RandomNames -Count 10
    $ips = @()
    
    # Requirement A: 3 records point to the same IP
    $commonIP = (1..4 | ForEach-Object {Get-Random -Minimum 1 -Maximum 255}) -join '.'
    $ips += @($commonIP, $commonIP, $commonIP)
    
    # Requirement B: 3 records with the same name but different IPs
    $sharedName = $names[3]
    for ($i = 0; $i -lt 3; $i++) {
        $ips += (1..4 | ForEach-Object {Get-Random -Minimum 1 -Maximum 255}) -join '.'
    }
    
    # Requirement C: Remaining 4 records with any IPs (public or private)
    for ($i = 0; $i -lt 4; $i++) {
        $ips += (1..4 | ForEach-Object {Get-Random -Minimum 1 -Maximum 255}) -join '.'
    }

    # Generate 10 A record entries
    for ($i = 0; $i -lt 10; $i++) {
        $records += [pscustomobject]@{
            Name = if ($i -ge 3 -and $i -lt 6) { $sharedName } else { $names[$i] }
            IP = $ips[$i]
        }
    }
    
    # Create DNS records in randomly assigned zones
    Create-DnsRecords -Zones $selectedZones -Records $records

    # Present user with options
    while ($true) {
        Write-Host "Options:" -ForegroundColor Cyan
        Write-Host "[1] Rollback (delete) the 10 DNS entries" -ForegroundColor Yellow
        Write-Host "[2] Modify the IP addresses of the 10 DNS entries" -ForegroundColor Yellow
        Write-Host "[3] Quit" -ForegroundColor Yellow
        $choice = Read-Host "Enter your choice"
        
        switch ($choice) {
            1 {
                Remove-DnsRecords -Records $records
                Write-Host "Rollback complete." -ForegroundColor Green
                break
            }
            2 {
                Modify-DnsRecords -Records $records
                Write-Host "IP addresses modified." -ForegroundColor Green
            }
            3 {
                break
            }
            default {
                Write-Host "Invalid choice. Please try again." -ForegroundColor Red
            }
        }
    }
} catch {
    Write-Error $_.Exception.Message
}
