#Requires -RunAsAdministrator

# Function to generate random RFC1918 IP address
function Get-RandomRFC1918IP {
    $ranges = @(
        @{Network="10.0.0.0"; Mask=8; Max=16777214},
        @{Network="172.16.0.0"; Mask=12; Max=1048574},
        @{Network="192.168.0.0"; Mask=16; Max=65534}
    )
    $range = $ranges | Get-Random
    $ipInt = [uint32]($range.Network.Split('.') | ForEach-Object { [uint32]($_) * [math]::Pow(256, 3-$_) } | Measure-Object -Sum).Sum
    $ipInt += Get-Random -Minimum 1 -Maximum $range.Max
    $ipBytes = [BitConverter]::GetBytes($ipInt)
    [Array]::Reverse($ipBytes)
    return ($ipBytes -join '.')
}

# Function to get random dictionary word
function Get-RandomDictionaryWord {
    $words = @('alpha','bravo','charlie','delta','echo','foxtrot','golf','hotel','india','juliett','kilo','lima','mike','november','oscar','papa','quebec','romeo','sierra','tango')
    return $words | Get-Random
}

# Initialize tracking file
$trackingFile = "$env:TEMP\dns_record_tracking.json"
$trackedRecords = @()

# Get DNS Server zones
try {
    $zones = Get-DnsServerZone | Where-Object { $_.ZoneType -eq 'Primary' -and $_.IsReverseLookup -eq $false }
    if ($zones.Count -eq 0) {
        Write-Error "No primary forward lookup zones found"
        exit
    }
}
catch {
    Write-Error "Failed to connect to DNS service: $_"
    exit
}

# Display zones and get selection
Write-Host "Available DNS Zones:"
$zones | ForEach-Object { $i=1 } { Write-Host "$i. $($_.ZoneName)"; $i++ }
$selection = Read-Host "Enter zone numbers (comma-separated) to use for A-record creation"

$selectedZones = @()
$selection.Split(',') | ForEach-Object {
    $index = [int]$_.Trim() - 1
    if ($index -ge 0 -and $index -lt $zones.Count) {
        $selectedZones += $zones[$index].ZoneName
    }
}

if ($selectedZones.Count -eq 0) {
    Write-Error "No valid zones selected"
    exit
}

# Generate 10 random words
$words = 1..10 | ForEach-Object { Get-RandomDictionaryWord }

# IP address requirements
$sameIP = Get-RandomRFC1918IP  # For 3 records with same IP
$loadBalanceIPs = 1..3 | ForEach-Object { Get-RandomRFC1918IP }  # For load balancing
$randomIPs = 1..4 | ForEach-Object { Get-RandomRFC1918IP }  # For remaining records

# Distribute records across zones
$recordsPerZone = [math]::Ceiling(10 / $selectedZones.Count)
$currentWord = 0

foreach ($zone in $selectedZones) {
    $recordsToCreate = [math]::Min($recordsPerZone, 10 - $currentWord)
    
    # First 3 records with same IP
    for ($i = 0; $i -lt 3 -and $currentWord -lt 10; $i++) {
        if ($selectedZones.Count -eq 1 -or $i -eq 0) {  # Ensure spread across zones if multiple
            $name = $words[$currentWord]
            try {
                Add-DnsServerResourceRecordA -Name $name -ZoneName $zone -IPv4Address $sameIP -TimeToLive 3600
                $trackedRecords += @{
                    Name = $name
                    Zone = $zone
                    IP = $sameIP
                    Type = 'A'
                }
                Write-Host "Created A-record: $name.$zone -> $sameIP"
                $currentWord++
            }
            catch {
                Write-Warning "Failed to create A-record for $name.$zone : $_"
            }
        }
    }
    
    # Load balanced record
    if ($currentWord -lt 10) {
        $name = $words[$currentWord]
        foreach ($ip in $loadBalanceIPs) {
            try {
                Add-DnsServerResourceRecordA -Name $name -ZoneName $zone -IPv4Address $ip -TimeToLive 3600
                $trackedRecords += @{
                    Name = $name
                    Zone = $zone
                    IP = $ip
                    Type = 'A'
                }
                Write-Host "Created A-record (load balance): $name.$zone -> $ip"
            }
            catch {
                Write-Warning "Failed to create A-record for $name.$zone : $_"
            }
        }
        $currentWord++
    }
    
    # Random records
    while ($currentWord -lt 10 -and $recordsToCreate -gt 0) {
        $name = $words[$currentWord]
        $ip = $randomIPs | Get-Random
        try {
            Add-DnsServerResourceRecordA -Name $name -ZoneName $zone -IPv4Address $ip -TimeToLive 3600
            $trackedRecords += @{
                Name = $name
                Zone = $zone
                IP = $ip
                Type = 'A'
            }
            Write-Host "Created A-record: $name.$zone -> $ip"
            $currentWord++
            $recordsToCreate--
        }
        catch {
            Write-Warning "Failed to create A-record for $name.$zone : $_"
        }
    }
}

# Save tracking information
$trackedRecords | ConvertTo-Json | Out-File -FilePath $trackingFile

# Cleanup option
$cleanup = Read-Host "Would you like to cleanup the created records? (y/n)"
if ($cleanup.ToLower() -eq 'y') {
    if (Test-Path $trackingFile) {
        $records = Get-Content $trackingFile | ConvertFrom-Json
        foreach ($record in $records) {
            try {
                Remove-DnsServerResourceRecord -ZoneName $record.Zone -RRType $record.Type -Name $record.Name -RecordData $record.IP -Force
                Write-Host "Removed A-record: $($record.Name).$($record.Zone) -> $($record.IP)"
            }
            catch {
                Write-Warning "Failed to remove A-record $($record.Name).$($record.Zone) : $_"
            }
        }
        Remove-Item $trackingFile -Force
        Write-Host "Cleanup completed and tracking file removed"
    }
    else {
        Write-Warning "No tracking file found for cleanup"
    }
}
else {
    Write-Host "Records preserved. Tracking file saved at: $trackingFile"
    Write-Host "To cleanup later, re-run script and select cleanup option"
}
